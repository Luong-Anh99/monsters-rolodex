{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","CardList","map","SearchBox","placeholder","handleChange","type","onChange","App","value","setState","searchField","target","state","fetch","then","response","json","users","this","filteredMonster","filter","monster","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BACtB,6BAAKL,EAAMI,SAASE,OACpB,4BAAIN,EAAMI,SAASG,YCHdC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMI,SAASK,KAAI,SAAAL,GAAQ,OACzB,cAAC,EAAD,CAAwBA,SAAUA,GAAvBA,EAASC,UCJlBK,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkCHG,E,kDAlCb,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOH,SAbxC,EAAKI,MAAQ,CACXhB,SAAU,GACVc,YAAY,IAJH,E,qDAQb,WAAoB,IAAD,OACjBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAACb,SAASqB,S,oBAMxC,WAAU,IAAD,EACuBC,KAAKN,MAA5BhB,EADA,EACAA,SAASc,EADT,EACSA,YACVS,EAAkBvB,EAASwB,QAAO,SAAAC,GAAO,OAAEA,EAAQvB,KAAKwB,cAAcC,SAASb,EAAYY,kBAEjG,OACE,sBAAK7B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEU,YAAY,iBACZC,aAAcc,KAAKd,eAErB,cAAC,EAAD,CAAUR,SAAUuB,W,GA7BVK,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2cc4761b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`}></img>\r\n        <h2>{props.monsters.name}</h2>\r\n        <p>{props.monsters.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>    \r\n        {props.monsters.map(monsters=>(\r\n           <Card key={monsters.id} monsters={monsters}/>\r\n        ))}\r\n    </div>\r\n);","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input\r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n    />\r\n)","import React from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\n\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField:'',\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users =>this.setState({monsters:users}));\n  }\n\n  handleChange = (value) => {\n    this.setState({searchField:value.target.value}) //search any user,  this use arrow function\n  }\n  render() {\n    const{ monsters,searchField}= this.state; \n    const filteredMonster = monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className='App'>\n        <h1>Monster Rolodex</h1>\n        <SearchBox\n          placeholder='Search Monster' \n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonster}/>\n      </div>\n     \n    )\n  }\n}\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}